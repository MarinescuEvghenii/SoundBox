package {	import flash.display.MovieClip;	import flash.media.Sound;	import flash.media.SoundTransform;	import flash.external.ExternalInterface;	import flash.net.URLRequest;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.media.SoundChannel;	import flash.utils.*;	public class Main extends MovieClip	{		var mySound:Sound = new Sound();		var mySoundTransform:SoundTransform = new SoundTransform();		var mySoundChannel:SoundChannel =  new SoundChannel();		var pointerAt:uint = 0;		var paused:Boolean = false;		var playing:Boolean = false;		var tmpVol:uint = 0;		public function Main()		{			if (ExternalInterface.available)			{				ExternalInterface.call("SoundBox.callbacks.onReady");				ExternalInterface.addCallback("play", playSound);				ExternalInterface.addCallback("pause", togglePauseSound);				ExternalInterface.addCallback("stop", stopSound);				ExternalInterface.addCallback("mute", muteSound);				ExternalInterface.addCallback("set", setParam);				ExternalInterface.addCallback("get", getParam);			}			/*setParam("src","http://localhost/muzaza/client/sound/ACDC%20-%20Highway%20To%20Hell.mp3");			playSound();						setParam("volume",0.1);						playSound();						setParam("currentTime",40);			pauseSound()			playSound();*/			setInterval(timeupdateHandler, 300);		}		private function playSound():void		{			playing = true;			paused = false;			playHandler();			mySoundChannel.stop();			mySoundChannel = mySound.play(pointerAt);			pointerAt = 0;			mySoundChannel.soundTransform = mySoundTransform;		}		private function stopSound():void		{			playing = false;			paused = true;			pauseHandler();			pointerAt = 0;			mySoundChannel.stop();		}		private function pauseSound():void		{			paused = true;			playing = false;			pauseHandler();			pointerAt = mySoundChannel.position;			mySoundChannel.stop();		}		private function togglePauseSound()		{			if (! paused)			{				pauseSound();			}			else			{				playSound();			}		}		private function muteSound():void		{			if (mySoundTransform.volume != 0)			{				tmpVol = mySoundTransform.volume;				mySoundTransform.volume = 0;			}			else			{				mySoundTransform.volume = tmpVol;			}			mySoundChannel.soundTransform = mySoundTransform;			volumeChangeHandler();		}		private function setParam(param, value):void		{			switch (param)			{				case "src" :					mySound.removeEventListener(IOErrorEvent.IO_ERROR, errorHandler);					mySound.removeEventListener(ProgressEvent.PROGRESS, progressHandler);					mySound = new Sound(new URLRequest(value));					mySound.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);					mySound.addEventListener(ProgressEvent.PROGRESS, progressHandler);					break;				case "volume" :					mySoundTransform.volume = value;					mySoundChannel.soundTransform = mySoundTransform;					volumeChangeHandler();					break;				case "currentTime" :					pointerAt = value * 1000;					playSound();					break;			}		}		private function getParam(param):Object		{			var _return;			switch (param)			{				case "src" :					_return = mySound.url;					break;				case "volume" :					_return = mySoundTransform.volume;					break;				case "currentTime" :					_return = mySoundChannel.position / 1000;					break;				case "duration" :					if (mySound && mySound.length > 0)					{						_return = (mySound.bytesTotal / (mySound.bytesLoaded / mySound.length)) / 1000;					}					else					{						_return = 0;					}			}			return _return;		}		private function progressHandler(event:ProgressEvent):void		{			var percents = Math.round(event.bytesLoaded / event.bytesTotal * 100);			if (ExternalInterface.available)			{				ExternalInterface.call("SoundBox.callbacks.onProgress", percents);			}		}		private function errorHandler(errorEvent:IOErrorEvent):void		{			if (ExternalInterface.available)			{				ExternalInterface.call("SoundBox.callbacks.onError",errorEvent.text);			}		}		private function timeupdateHandler():void		{			if (playing)			{				var sec = mySoundChannel.position / 1000;				if (ExternalInterface.available)				{					ExternalInterface.call("SoundBox.callbacks.onTimeupdate", sec);				}			}		}		private function volumeChangeHandler():void		{			if (ExternalInterface.available)			{				ExternalInterface.call("SoundBox.callbacks.onVolumeChange", mySoundTransform.volume);			}		}		private function playHandler():void		{			if (ExternalInterface.available)			{				ExternalInterface.call("SoundBox.callbacks.onPlay");			}		}		private function pauseHandler():void		{			if (ExternalInterface.available)			{				ExternalInterface.call("SoundBox.callbacks.onPause");			}		}	}}